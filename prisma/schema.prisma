generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model sabq_users {
  id                  String                       @id @default(cuid())
  email               String                       @unique
  password            String
  name                String?
  roleId              String?
  createdAt           DateTime                     @default(now())
  updatedAt           DateTime                     @updatedAt
  activityLogs        sabq_activity_logs[]
  passwordResetTokens sabq_password_reset_tokens[]
  sessions            sabq_sessions[]
  role                sabq_roles?                  @relation(fields: [roleId], references: [id])

  @@index([email])
  @@index([roleId])
}

model sabq_roles {
  id          String                  @id @default(uuid())
  name        String                  @unique
  nameAr      String
  description String?
  isActive    Boolean                 @default(true)
  createdAt   DateTime                @default(now())
  updatedAt   DateTime                @updatedAt
  permissions sabq_role_permissions[]
  users       sabq_users[]
}

model sabq_permissions {
  id          String                  @id @default(uuid())
  name        String                  @unique
  nameAr      String
  resource    String
  action      String
  description String?
  createdAt   DateTime                @default(now())
  updatedAt   DateTime                @updatedAt
  roles       sabq_role_permissions[]

  @@unique([resource, action])
}

model sabq_role_permissions {
  id           String           @id @default(uuid())
  roleId       String
  permissionId String
  createdAt    DateTime         @default(now())
  permission   sabq_permissions @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  role         sabq_roles       @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
}

model sabq_sessions {
  id        String     @id @default(cuid())
  userId    String
  token     String     @unique
  ipAddress String?
  userAgent String?
  expiresAt DateTime
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      sabq_users @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expiresAt])
}

model sabq_password_reset_tokens {
  id        String     @id @default(cuid())
  userId    String
  token     String     @unique
  expiresAt DateTime
  createdAt DateTime   @default(now())
  used      Boolean    @default(false)
  user      sabq_users @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([userId])
}

model sabq_activity_logs {
  id         String      @id @default(cuid())
  userId     String?
  action     String
  resource   String?
  resourceId String?
  details    Json?
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime    @default(now())
  user       sabq_users? @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([action])
  @@index([createdAt])
}
